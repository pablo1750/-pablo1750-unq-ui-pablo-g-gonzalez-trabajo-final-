[{"C:\\Users\\PabloGabriel\\Documents\\Facultad\\Interfaces de usuario\\RepoTFI\\src\\App.js":"1","C:\\Users\\PabloGabriel\\Documents\\Facultad\\Interfaces de usuario\\RepoTFI\\src\\index.js":"2","C:\\Users\\PabloGabriel\\Documents\\Facultad\\Interfaces de usuario\\RepoTFI\\src\\components\\Session.jsx":"3","C:\\Users\\PabloGabriel\\Documents\\Facultad\\Interfaces de usuario\\RepoTFI\\src\\components\\Player.jsx":"4","C:\\Users\\PabloGabriel\\Documents\\Facultad\\Interfaces de usuario\\RepoTFI\\src\\components\\Cards.jsx":"5","C:\\Users\\PabloGabriel\\Documents\\Facultad\\Interfaces de usuario\\RepoTFI\\src\\components\\Choice.jsx":"6","C:\\Users\\PabloGabriel\\Documents\\Facultad\\Interfaces de usuario\\RepoTFI\\src\\components\\Slot.jsx":"7","C:\\Users\\PabloGabriel\\Documents\\Facultad\\Interfaces de usuario\\RepoTFI\\src\\components\\PlayerConfig.jsx":"8","C:\\Users\\PabloGabriel\\Documents\\Facultad\\Interfaces de usuario\\RepoTFI\\src\\components\\Game.jsx":"9","C:\\Users\\PabloGabriel\\Documents\\Facultad\\Interfaces de usuario\\RepoTFI\\src\\reportWebVitals.js":"10","C:\\Users\\PabloGabriel\\Documents\\Facultad\\Interfaces de usuario\\RepoTFI\\src\\components\\Nav.jsx":"11","C:\\Users\\PabloGabriel\\Documents\\Facultad\\Interfaces de usuario\\RepoTFI\\src\\components\\Board.jsx":"12"},{"size":201,"mtime":1606681517584,"results":"13","hashOfConfig":"14"},{"size":594,"mtime":1606371938298,"results":"15","hashOfConfig":"14"},{"size":6425,"mtime":1606720518972,"results":"16","hashOfConfig":"14"},{"size":2990,"mtime":1606717216412,"results":"17","hashOfConfig":"14"},{"size":2142,"mtime":1606684360035,"results":"18","hashOfConfig":"14"},{"size":443,"mtime":1606522169256,"results":"19","hashOfConfig":"14"},{"size":637,"mtime":1606572078828,"results":"20","hashOfConfig":"14"},{"size":2036,"mtime":1606718219955,"results":"21","hashOfConfig":"14"},{"size":139,"mtime":1606666874811,"results":"22","hashOfConfig":"14"},{"size":362,"mtime":1606346687655,"results":"23","hashOfConfig":"14"},{"size":221,"mtime":1606709380303,"results":"24","hashOfConfig":"14"},{"size":6890,"mtime":1606709512088,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"163p6h",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"56"},"C:\\Users\\PabloGabriel\\Documents\\Facultad\\Interfaces de usuario\\RepoTFI\\src\\App.js",["60"],"C:\\Users\\PabloGabriel\\Documents\\Facultad\\Interfaces de usuario\\RepoTFI\\src\\index.js",[],["61","62"],"C:\\Users\\PabloGabriel\\Documents\\Facultad\\Interfaces de usuario\\RepoTFI\\src\\components\\Session.jsx",["63","64","65","66","67","68"],"import React, { useEffect, useState } from 'react';\r\nimport Swal from 'sweetalert2';\r\nimport { Board } from './Board';\r\nimport { playerEmpty, PLAYER_STATUS } from './Player';\r\nimport { PlayerConfig } from './PlayerConfig';\r\n\r\n\r\nexport const SESSION_STATE = {\r\n  CONFIG: 0,\r\n  START: 1,\r\n  PLAYER_READY: 2,\r\n  END_ROUND: 3,\r\n  SHOW_CARDS: 4,\r\n  SHOW_RESULTS: 5\r\n}\r\n\r\nexport const emptySession = {\r\n    playersSlots: [\r\n      {...playerEmpty(true), index: 1},\r\n      {...playerEmpty(true), index: 2},\r\n    ],\r\n    players: [],\r\n    start: false,\r\n    state: SESSION_STATE.CONFIG,\r\n    playersCounter: 2\r\n  }\r\n\r\nexport const Session = (props) => {\r\n\r\n  const [data, setData] = useState(emptySession);\r\n  const [ok, setOk] = useState(false);\r\n\r\n  useEffect(() => { \r\n    //update every players settings ok for start\r\n    setOk(data.playersSlots.length === 0 );\r\n  }, [data.playersSlots] );\r\n\r\n  const handleExitBoard = (players) => {\r\n    setData({\r\n      ...data, \r\n      state: SESSION_STATE.CONFIG,\r\n      players: players.map(player => ({\r\n        ...player, \r\n        //deselecciono la carta\r\n        cardSelected: undefined, \r\n        //reinicio el score\r\n        score: 0, \r\n        //si no hubo ganador y est jugador perdio, no juega la siguiente ronda\r\n        status: PLAYER_STATUS.PLAYING,\r\n      })) \r\n    });\r\n  }  \r\n\r\n  const handleRestart = () => {\r\n    Swal.fire({\r\n      icon: 'question',\r\n      html: `Are you sure to restart?`,\r\n      confirmButtonText: 'Yes',\r\n      cancelButtonText: 'No',\r\n      showCancelButton: true,\r\n      focusCancel: true,\r\n      focusConfirm: false,\r\n      timer: 4000,\r\n      timerProgressBar: true,\r\n    }).then((result) => {\r\n      result.isConfirmed && setData(emptySession);\r\n    })\r\n  }\r\n\r\n  const handleStart = () => {\r\n    setData({...data, state: SESSION_STATE.START});\r\n  }\r\n  \r\n  const handleRemovePlayer = (player) => {\r\n    Swal.fire({\r\n      icon: 'info',\r\n      html: `Are you sure to eliminate ${player.name}?`,\r\n      confirmButtonText: 'Yes',\r\n      cancelButtonText: 'No',\r\n      showCancelButton: true,\r\n      focusCancel: true,\r\n      focusConfirm: false,\r\n      timer: 4000,\r\n      timerProgressBar: true,\r\n    }).then((result) => {\r\n      result.isConfirmed && setData({\r\n        ...data, \r\n        players: data.players.filter(item => item !== player),\r\n      });\r\n    })\r\n  }\r\n\r\n  const handleRemovePlayerSlot = (slot) => {\r\n    setData({...data, playersSlots: data.playersSlots.filter(item => item !== slot)});\r\n  }\r\n\r\n  const handleConfirmPlayer = (playerSlot, player) =>{\r\n    setData({\r\n      ...data, \r\n      players: [\r\n        ...data.players, player\r\n      ],\r\n      playersSlots: data.playersSlots.filter(slot => playerSlot !== slot)\r\n    });\r\n  };\r\n\r\n  const handleAddPlayerSlot = () => {\r\n    setData({\r\n      ...data, \r\n      playersSlots: [{ ...playerEmpty(false), index: data.playersCounter + 1 } ], \r\n      playersCounter: data.playersCounter + 1, \r\n    });\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n        <div className={`container overflow-auto ${data.state == SESSION_STATE.CONFIG && \"w3-animate-top\"}`}>\r\n          {data.state == SESSION_STATE.CONFIG &&\r\n            <>\r\n              <div className=\"row\" style={{minHeight: \"55px\"}}>\r\n                <div className=\"col col-12 mh-100\">\r\n                  {data.players.length > 0 && <button className=\"btn btn-danger m-1\" onClick={handleRestart}>Restart</button>}\r\n                  {data.players.length > 1 && data.playersSlots.length == 0 && <button className=\"btn btn-success m-1\" onClick={handleStart}>Play</button>}\r\n                </div>   \r\n              </div>\r\n              <div className=\"row\">\r\n                <div className=\"col col-2 d-none d-sm-none d-md-block\"> </div>\r\n                <div className=\"col col-12 col-md-8 \"> \r\n                  <ul className=\"list-group\">\r\n\r\n                    <li className=\"list-group-item align-items-center\">\r\n                      Players\r\n                    </li>\r\n\r\n                    {data.players.map(player => \r\n                      <li className=\"list-group-item d-flex justify-content-between align-items-center\" key={`playerOk-${player.index}`}>\r\n                        {player.name}\r\n                        <span>\r\n                          <span className=\"badge badge-secondary badge-pill\">{player.victories}</span>\r\n                          <a className=\"btn btn-outline-primary btn-sm ml-2\" onClick={() => {handleRemovePlayer(player)}}>\r\n                            <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-trash\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                              <path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\"/>\r\n                              <path fill-rule=\"evenodd\" d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"/>\r\n                            </svg>\r\n                          </a>\r\n                        </span>\r\n                        \r\n                      </li>\r\n                    )}\r\n\r\n                    {data.playersSlots.map(playerSlot => \r\n                      <li className=\"list-group-item\" key={playerSlot.index}>\r\n                        <PlayerConfig data={playerSlot} onConfirmPlayer={(player) => {handleConfirmPlayer(playerSlot, player)}} onCancelPlayer={() => handleRemovePlayerSlot(playerSlot)}/>\r\n                      </li>\r\n                    )}\r\n\r\n                    {data.playersSlots.length == 0 && \r\n                      <li className=\"list-group-item\">\r\n                        <button className=\"btn btn-primary\" onClick={handleAddPlayerSlot}>Add Player</button>\r\n                      </li>\r\n                    }\r\n                  </ul>  \r\n                </div>\r\n                <div className=\"col col-2 d-none d-sm-none d-md-block\"> </div>\r\n              </div>\r\n            </>\r\n          }\r\n        </div>\r\n\r\n\r\n        <div className={`container overflow-auto ${data.state >= SESSION_STATE.START && \"w3-animate-top\"}`}>\r\n          {data.state >= SESSION_STATE.START &&\r\n            <Board players={data.players} onExitBoard={handleExitBoard}/>\r\n          }\r\n        </div>\r\n\r\n    </>\r\n\r\n  )\r\n}\r\n",["69","70"],"C:\\Users\\PabloGabriel\\Documents\\Facultad\\Interfaces de usuario\\RepoTFI\\src\\components\\Player.jsx",["71","72","73","74","75","76"],"C:\\Users\\PabloGabriel\\Documents\\Facultad\\Interfaces de usuario\\RepoTFI\\src\\components\\Cards.jsx",["77","78","79","80"],"\r\n\r\nimport React from 'react';\r\n\r\nexport const coveredCard =   {\r\n  name: \"Covered\", \r\n  beat: [\r\n    { card: \"\", message: \"\" },\r\n    { card: \"\", message: \"\" },\r\n  ],\r\n  image: \"assets/card_covered.png\"\r\n};\r\n\r\nexport const emptyCard =   {\r\n  name: \"Empty\", \r\n  beat: [\r\n    { card: \"\", message: \"\" },\r\n    { card: \"\", message: \"\" },\r\n  ],\r\n  image: \"assets/card_empty.png\"\r\n};\r\n\r\nexport const cards = [\r\n  {\r\n    name: \"Rock\", \r\n    beat: [\r\n      { card: \"Lizard\", message: \"Rock crushes Lizard\" },\r\n      { card: \"Scissors\", message: \"Rock crushes Scissors\" },\r\n    ],\r\n    image: \"assets/card_rock.png\"\r\n  },\r\n  {\r\n    name: \"Paper\", \r\n    beat: [\r\n      { card: \"Rock\", message: \"Paper covers Rock\" },\r\n      { card: \"Spock\", message: \"Paper disproves Spock\" },\r\n    ],\r\n    image: \"assets/card_paper.png\"\r\n  },\r\n  {\r\n    name: \"Scissors\", \r\n    beat: [\r\n      { card: \"Paper\", message: \"Scissors cuts Paper\" },\r\n      { card: \"Lizard\", message: \"Scissors decapitates Lizard\" },\r\n    ],\r\n    image: \"assets/card_scissors.png\"\r\n  },\r\n  {\r\n    name: \"Lizard\", \r\n    beat: [\r\n      { card: \"Spock\", message: \"Lizard poisons Spock\" },\r\n      { card: \"Paper\", message: \"Lizard eats Paper\" },\r\n    ],\r\n    image: \"assets/card_lizard.png\"\r\n  },\r\n  {\r\n    name: \"Spock\", \r\n    beat: [\r\n      { card: \"Scissors\", message: \"Spock smashes Scissors\" },\r\n      { card: \"Rock\", message: \"Spock vaporizes Rock\" },\r\n    ],\r\n    image: \"assets/card_spock.png\"\r\n  },\r\n];\r\n\r\nexport const cardBeatTo = (card1, card2) => card1.beat.some(b => b.card == card2.name);\r\n\r\nexport const whoWins = (card1, card2) => {\r\n  if(card1.beat.any(card => card.name == card2.name)){\r\n    return card1;\r\n  }\r\n  if(card2.beat.any(card => card.name == card1.name)){\r\n    return card2;\r\n  }\r\n  return null;\r\n}\r\n\r\nexport const Card = (props) => {\r\n  return (\r\n    <>\r\n      <div className=\"card\" style={{width: \"100%\", textAlign: \"center\", backgroundColor: \"rgba(255, 255, 255, 0.192)\"}} >\r\n        <img src={props.card.image} style={{width: props.width ? props.width : \"100%\"}} className=\"rounded mx-auto d-block p-1 m-0\" alt=\"card-image\"/>       \r\n      </div>\r\n   </>\r\n  )\r\n}\r\n","C:\\Users\\PabloGabriel\\Documents\\Facultad\\Interfaces de usuario\\RepoTFI\\src\\components\\Choice.jsx",[],["81","82"],"C:\\Users\\PabloGabriel\\Documents\\Facultad\\Interfaces de usuario\\RepoTFI\\src\\components\\Slot.jsx",["83","84","85","86"],"import React, { useState } from 'react';\r\nimport { Card, coveredCard } from './Cards';\r\nimport { USER_TYPE } from './Player';\r\n\r\nexport const Slot = (props) => {\r\n  //const [covered, setCovered] = useState(true);\r\n  const handleSelectClick = () => {\r\n    props.onSelect(props.card);\r\n  }\r\n\r\n  return (\r\n      <button className=\"btn m-0 p-0\" onClick={handleSelectClick} disabled={props.player.type == USER_TYPE.CPU}>\r\n        {props.player.type == USER_TYPE.CPU &&\r\n          <Card card={coveredCard} />\r\n        }\r\n        {props.player.type == USER_TYPE.HUMAN &&\r\n          <Card card={props.card} />\r\n        }\r\n      </button>\r\n  )\r\n}","C:\\Users\\PabloGabriel\\Documents\\Facultad\\Interfaces de usuario\\RepoTFI\\src\\components\\PlayerConfig.jsx",["87","88","89","90","91","92"],"import React, { useState } from 'react';\r\nimport { PLAYER_STATUS, USER_TYPE } from './Player';\r\n\r\nexport const PlayerConfig = (props) => {\r\n\r\n  const [data, setData ] = useState(props.data)\r\n  const [error, setError ] = useState(false)\r\n  \r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    if(data.name == \"\"){\r\n      setError(true);\r\n      return;\r\n    }\r\n    props.onConfirmPlayer({...data, ok: true});\r\n  }\r\n  \r\n  const handleNameChange = (event) => {\r\n    setData({...data, name: event.target.value});\r\n  }\r\n\r\n  const handleCpuClick = (event) => {\r\n    setData({...data, name: \"CPU\", type: USER_TYPE.CPU});\r\n  }\r\n  \r\n  const handleHumanClick = (event) => {\r\n    setData({...data, name: \"\", type: USER_TYPE.HUMAN});\r\n  }\r\n  \r\n\r\n  return (\r\n    <>\r\n      {\r\n        <form className={`${error && \"was-validated\"}`} onSubmit={handleSubmit} noValidate>\r\n\r\n          <div className=\"input-group input-group-sm\">\r\n            <div className=\"input-group-prepend\">\r\n              <span className=\"input-group-text\">Player {data.index}</span>\r\n            </div>\r\n            <input className=\"form-control\" placeholder=\"Name\" value={data.name} autoFocus={data.index!=2} disabled={data.type == USER_TYPE.CPU} onChange={handleNameChange} required/>\r\n            \r\n            <div className=\"input-group-append\">\r\n              {data.type == USER_TYPE.CPU && <button type=\"button\" className=\"btn btn-outline-secondary\" onClick={handleHumanClick}>HUMAN</button>}\r\n              {data.type == USER_TYPE.HUMAN && <button type=\"button\" className=\"btn btn-outline-secondary\" onClick={handleCpuClick}>CPU</button>}\r\n              <button type=\"submit\" className=\"btn btn-outline-success\">Confirm</button>\r\n              {!data.readonly && <button className=\"btn btn-outline-danger\" onClick={() => props.onCancelPlayer()}>Cancel</button>}\r\n            </div>\r\n          </div>\r\n            <div className=\"invalid-feedback\">\r\n              Please choose a name.\r\n            </div>\r\n        </form>\r\n\r\n      }\r\n    </>\r\n  )\r\n\r\n}","C:\\Users\\PabloGabriel\\Documents\\Facultad\\Interfaces de usuario\\RepoTFI\\src\\components\\Game.jsx",[],"C:\\Users\\PabloGabriel\\Documents\\Facultad\\Interfaces de usuario\\RepoTFI\\src\\reportWebVitals.js",[],"C:\\Users\\PabloGabriel\\Documents\\Facultad\\Interfaces de usuario\\RepoTFI\\src\\components\\Nav.jsx",["93"],"import React from 'react';\r\n\r\nexport const Nav = (props) => {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n      <a className=\"navbar-brand\" href=\"#\">RPSLS Game</a>\r\n    </nav>\r\n  )\r\n}\r\n",["94","95"],"C:\\Users\\PabloGabriel\\Documents\\Facultad\\Interfaces de usuario\\RepoTFI\\src\\components\\Board.jsx",["96","97","98","99","100","101","102","103","104","105","106"],"import React, { useEffect, useState } from 'react';\r\nimport Swal from 'sweetalert2';\r\nimport { cardBeatTo, cards, coveredCard } from './Cards';\r\nimport { Player, PLAYER_STATUS, USER_TYPE } from './Player';\r\nimport { SESSION_STATE } from './Session';\r\nimport { Slot } from './Slot';\r\n\r\n\r\nexport const emptyBoard = () => { return {\r\n  players: [],\r\n  current: 0,\r\n  state: SESSION_STATE.START,\r\n  roundHasWinner: false,\r\n}}\r\n\r\n\r\nexport const Board = (props) => {\r\n  \r\n  const [data, setData] = useState({...emptyBoard(), players: props.players} );\r\n\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    //update end of round (si todos los jugadores en estado PLAYING tienen carta seleccionada)\r\n    if(data.players.length > 0 && data.players.filter(player => player.status === PLAYER_STATUS.PLAYING).every(player => !!player.cardSelected)){\r\n      setData({\r\n        ...data, \r\n        state : SESSION_STATE.END_ROUND\r\n      });\r\n      autoShowCards();\r\n    }\r\n\r\n    //si el usuario actual no esta jugando porque perdio le pongo una carga cubierta\r\n    if( data.current in data.players && data.players[data.current].status === PLAYER_STATUS.ROUND_LOST) {\r\n      handleCardSelect(coveredCard);\r\n      return;\r\n    }\r\n\r\n    //si el usuario actual es la maquina, dejo un tiempo de espera para que parezca que la cpu esta pensando antes de decidir\r\n    if( data.current in data.players && data.players[data.current].type === USER_TYPE.CPU) {\r\n      handlePlayerReady();\r\n      setTimeout(() => {\r\n        handleCardSelect(cards[getRandomInt(0,5)]);;\r\n      }, 500);\r\n    }\r\n  }, [data.current] );\r\n\r\n  const nextTurn = () => {\r\n    return data.current + 1;\r\n  }\r\n\r\n  \r\n  const handleCardSelect = (card) => {\r\n    setData({\r\n      ...data, \r\n      players: data.players.map((item, j) => {\r\n        return (j === data.current) ? {...item, cardSelected: card} : item;\r\n      }),\r\n      current: nextTurn(),\r\n      state: SESSION_STATE.START\r\n    });\r\n\r\n    console.log(data)\r\n  }\r\n\r\n\r\n  \r\n  const handleShowCards = () => {\r\n    setData({...data, state: SESSION_STATE.SHOW_CARDS});\r\n    setTimeout(()=>{handleShowResults()}, 1000)\r\n  }\r\n\r\n  const handleShowResults = () => {\r\n\r\n\r\n    const cardsSelected = data.players\r\n      .filter(player => player.status === PLAYER_STATUS.PLAYING)\r\n      .map(player => player.cardSelected);\r\n\r\n      //este filtro es para eliminar duplicados\r\n    const cardsSelectedUniques = cardsSelected.filter((v, i, a) => a.indexOf(v) === i);\r\n\r\n    const scores = cardsSelectedUniques.map(card1 => {\r\n      return {\r\n        name: card1.name,\r\n        value: cardsSelected.filter(card2 => cardBeatTo(card1, card2)).length,\r\n        count: cardsSelected.filter(card2 => card1.name === card2.name).length,\r\n      }\r\n    });\r\n    const maxScore = Math.max.apply(null, scores.map(score => {return score.value} ));\r\n    const hasWinner = scores.filter(s => s.value == maxScore).length == 1 &&  scores.filter(s => s.value == maxScore)[0].count == 1 ;\r\n    const winnersStatus = hasWinner ? PLAYER_STATUS.ROUND_WINNER : PLAYER_STATUS.ROUND_TIED;\r\n\r\n    setData({\r\n      ...data, \r\n      state: SESSION_STATE.SHOW_RESULTS,\r\n      roundHasWinner: hasWinner,\r\n      players: data.players.map((player) => {\r\n        if(player.status !== PLAYER_STATUS.PLAYING){\r\n          return player;\r\n        }else{\r\n          const score = scores.find(s => s.name === player.cardSelected.name).value\r\n          console.log({cardsSelected: cardsSelected, scores: scores, maxScore: maxScore, hasWinner: hasWinner, winnersStatus: winnersStatus, player: player, score: score});\r\n          return {\r\n            ...player, \r\n            score: score,\r\n            status: score == maxScore ? winnersStatus : PLAYER_STATUS.ROUND_LOST,\r\n            victories: score == maxScore && hasWinner ? player.victories + 1 : player.victories,\r\n          };\r\n        }\r\n      })\r\n\r\n    });\r\n  \r\n  }\r\n\r\n \r\n  const handleNextRound = () => {\r\n    setData({\r\n      ...data, \r\n      roundHasWinner: false,\r\n      state: SESSION_STATE.START,\r\n      current: 0,\r\n      players: data.players.map(player => {\r\n        return {\r\n          ...player, \r\n          //deselecciono la carta\r\n          cardSelected: undefined, \r\n          //reinicio el score\r\n          score: 0, \r\n          //si no hubo ganador y est jugador perdio, no juega la siguiente ronda\r\n          status: !data.roundHasWinner && player.status === PLAYER_STATUS.ROUND_LOST ? player.status : PLAYER_STATUS.PLAYING,\r\n        }\r\n      }\r\n\r\n      ) \r\n    });\r\n  }\r\n\r\n  const handlePlayerReady = () => {\r\n    //el usuario dice que esta listo, pero si es cpu tengo que elegir yo la carta::\r\n    setData({...data, state: SESSION_STATE.PLAYER_READY});\r\n  }\r\n\r\n  //funcion extraida de developer.mozilla.org\r\n  //https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Math/random\r\n  const getRandomInt = (min, max) => Math.floor(Math.random() * (max - min)) + min;\r\n\r\n  const autoShowCards = () => {\r\n    \r\n    Swal.fire({\r\n      title: 'RPSLS!',\r\n      html: 'All players have chosen.',\r\n      timer: 500,\r\n      timerProgressBar: true,\r\n      willOpen: () => {\r\n        Swal.showLoading()\r\n      },\r\n      willClose: () => {\r\n        handleShowResults()\r\n      }\r\n    }).then((result) => {\r\n\r\n    })\r\n  } \r\n\r\n  return (\r\n    <>\r\n\r\n\r\n      <div className=\"row\" style={{minHeight: \"55px\"}}>\r\n        <div className=\"col col-12 mh-100\">\r\n          <button className=\"btn btn-danger m-1\" onClick={() => {props.onExitBoard(data.players)}}>Exit</button>\r\n          {data.state == SESSION_STATE.END_ROUND && <button className=\"btn btn-info m-1\" onClick={handleShowCards}>Show Cards</button>}\r\n          {data.state == SESSION_STATE.SHOW_RESULTS && data.roundHasWinner && <button className=\"btn btn-success m-1\" onClick={handleNextRound}>Next Round</button>}\r\n          {data.state == SESSION_STATE.SHOW_RESULTS && !data.roundHasWinner && <button className=\"btn btn-warning m-1\" onClick={handleNextRound}>Tie-breaker</button>}\r\n        </div>   \r\n      </div>\r\n      <div className=\"row\">\r\n        {data.players.map((player, index) => \r\n          <div className=\"col-6 col-md-4 col-lg-2 mb-3\">\r\n            <Player key={`playerBoard-${player.index}`} data={player} onReady={handlePlayerReady} turn={index == data.current} show={data.state >= SESSION_STATE.SHOW_CARDS} />\r\n          </div>\r\n        )}  \r\n      </div>\r\n\r\n      <div className={`container fixed-bottom overflow-auto ${data.state === SESSION_STATE.PLAYER_READY && \"w3-animate-bottom\"}`}>\r\n        {data.state === SESSION_STATE.PLAYER_READY &&\r\n\r\n          <div className=\"row\">\r\n            {cards.map(card => \r\n              <div className=\"col m-0 p-0\" key={`slot_${card.name}`}>\r\n                <Slot card={card} onSelect={() => handleCardSelect(card)} player={data.players[data.current]}/>\r\n              </div> \r\n            )} \r\n          </div>\r\n\r\n        }\r\n      </div>\r\n\r\n    </>\r\n  )\r\n}\r\n",{"ruleId":"107","severity":1,"message":"108","line":1,"column":8,"nodeType":"109","messageId":"110","endLine":1,"endColumn":12},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"107","severity":1,"message":"115","line":31,"column":10,"nodeType":"109","messageId":"110","endLine":31,"endColumn":12},{"ruleId":"116","severity":1,"message":"117","line":118,"column":63,"nodeType":"118","messageId":"119","endLine":118,"endColumn":65},{"ruleId":"116","severity":1,"message":"117","line":119,"column":23,"nodeType":"118","messageId":"119","endLine":119,"endColumn":25},{"ruleId":"116","severity":1,"message":"117","line":124,"column":72,"nodeType":"118","messageId":"119","endLine":124,"endColumn":74},{"ruleId":"120","severity":1,"message":"121","line":141,"column":27,"nodeType":"122","endLine":141,"endColumn":123},{"ruleId":"116","severity":1,"message":"117","line":158,"column":47,"nodeType":"118","messageId":"119","endLine":158,"endColumn":49},{"ruleId":"111","replacedBy":"123"},{"ruleId":"113","replacedBy":"124"},{"ruleId":"107","severity":1,"message":"125","line":34,"column":10,"nodeType":"109","messageId":"110","endLine":34,"endColumn":18},{"ruleId":"116","severity":1,"message":"117","line":47,"column":111,"nodeType":"118","messageId":"119","endLine":47,"endColumn":113},{"ruleId":"116","severity":1,"message":"117","line":75,"column":30,"nodeType":"118","messageId":"119","endLine":75,"endColumn":32},{"ruleId":"116","severity":1,"message":"117","line":78,"column":30,"nodeType":"118","messageId":"119","endLine":78,"endColumn":32},{"ruleId":"116","severity":1,"message":"117","line":81,"column":30,"nodeType":"118","messageId":"119","endLine":81,"endColumn":32},{"ruleId":"116","severity":1,"message":"117","line":84,"column":30,"nodeType":"118","messageId":"119","endLine":84,"endColumn":32},{"ruleId":"116","severity":1,"message":"117","line":66,"column":73,"nodeType":"118","messageId":"119","endLine":66,"endColumn":75},{"ruleId":"116","severity":1,"message":"117","line":69,"column":39,"nodeType":"118","messageId":"119","endLine":69,"endColumn":41},{"ruleId":"116","severity":1,"message":"117","line":72,"column":39,"nodeType":"118","messageId":"119","endLine":72,"endColumn":41},{"ruleId":"126","severity":1,"message":"127","line":82,"column":9,"nodeType":"122","endLine":82,"endColumn":151},{"ruleId":"111","replacedBy":"128"},{"ruleId":"113","replacedBy":"129"},{"ruleId":"107","severity":1,"message":"130","line":1,"column":17,"nodeType":"109","messageId":"110","endLine":1,"endColumn":25},{"ruleId":"116","severity":1,"message":"117","line":12,"column":95,"nodeType":"118","messageId":"119","endLine":12,"endColumn":97},{"ruleId":"116","severity":1,"message":"117","line":13,"column":28,"nodeType":"118","messageId":"119","endLine":13,"endColumn":30},{"ruleId":"116","severity":1,"message":"117","line":16,"column":28,"nodeType":"118","messageId":"119","endLine":16,"endColumn":30},{"ruleId":"107","severity":1,"message":"131","line":2,"column":10,"nodeType":"109","messageId":"110","endLine":2,"endColumn":23},{"ruleId":"116","severity":1,"message":"117","line":11,"column":18,"nodeType":"118","messageId":"119","endLine":11,"endColumn":20},{"ruleId":"116","severity":1,"message":"132","line":40,"column":103,"nodeType":"118","messageId":"119","endLine":40,"endColumn":105},{"ruleId":"116","severity":1,"message":"117","line":40,"column":128,"nodeType":"118","messageId":"119","endLine":40,"endColumn":130},{"ruleId":"116","severity":1,"message":"117","line":43,"column":26,"nodeType":"118","messageId":"119","endLine":43,"endColumn":28},{"ruleId":"116","severity":1,"message":"117","line":44,"column":26,"nodeType":"118","messageId":"119","endLine":44,"endColumn":28},{"ruleId":"120","severity":1,"message":"133","line":6,"column":7,"nodeType":"122","endLine":6,"endColumn":44},{"ruleId":"111","replacedBy":"134"},{"ruleId":"113","replacedBy":"135"},{"ruleId":"136","severity":1,"message":"137","line":47,"column":6,"nodeType":"138","endLine":47,"endColumn":20,"suggestions":"139"},{"ruleId":"116","severity":1,"message":"117","line":92,"column":50,"nodeType":"118","messageId":"119","endLine":92,"endColumn":52},{"ruleId":"116","severity":1,"message":"117","line":92,"column":70,"nodeType":"118","messageId":"119","endLine":92,"endColumn":72},{"ruleId":"116","severity":1,"message":"117","line":92,"column":106,"nodeType":"118","messageId":"119","endLine":92,"endColumn":108},{"ruleId":"116","severity":1,"message":"117","line":92,"column":128,"nodeType":"118","messageId":"119","endLine":92,"endColumn":130},{"ruleId":"116","severity":1,"message":"117","line":108,"column":27,"nodeType":"118","messageId":"119","endLine":108,"endColumn":29},{"ruleId":"116","severity":1,"message":"117","line":109,"column":30,"nodeType":"118","messageId":"119","endLine":109,"endColumn":32},{"ruleId":"116","severity":1,"message":"117","line":175,"column":23,"nodeType":"118","messageId":"119","endLine":175,"endColumn":25},{"ruleId":"116","severity":1,"message":"117","line":176,"column":23,"nodeType":"118","messageId":"119","endLine":176,"endColumn":25},{"ruleId":"116","severity":1,"message":"117","line":177,"column":23,"nodeType":"118","messageId":"119","endLine":177,"endColumn":25},{"ruleId":"116","severity":1,"message":"117","line":183,"column":111,"nodeType":"118","messageId":"119","endLine":183,"endColumn":113},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","no-native-reassign",["140"],"no-negated-in-lhs",["141"],"'ok' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["140"],["141"],"'choising' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.",["140"],["141"],"'useState' is defined but never used.","'PLAYER_STATUS' is defined but never used.","Expected '!==' and instead saw '!='.","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md",["140"],["141"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'autoShowCards', 'data', 'handleCardSelect', and 'handlePlayerReady'. Either include them or remove the dependency array. Mutable values like 'data.current' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["142"],"no-global-assign","no-unsafe-negation",{"desc":"143","fix":"144"},"Update the dependencies array to be: [autoShowCards, data, handleCardSelect, handlePlayerReady]",{"range":"145","text":"146"},[1552,1566],"[autoShowCards, data, handleCardSelect, handlePlayerReady]"]